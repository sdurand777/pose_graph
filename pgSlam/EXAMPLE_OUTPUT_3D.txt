EXEMPLE DE SORTIE - EXECUTION DE main_3d.py
============================================

Commande exécutée:
$ python main_3d.py --seed 42 --no-viz

Sortie attendue:
----------------

======================================================================
3D POSE GRAPH SLAM OPTIMIZATION
======================================================================
  Trajectory type: uturn
  Odometry info: 500.0
  Loop closure info: 700.0
  Poses per segment: 20
  Loop sampling rate: 2
  Odometry noise sigma: 0.03
  Loop from noisy poses: False
  Loop noise sigma: 0.0
  Random seed: 42
======================================================================
  Total poses: ~120

  Number of loop closures: 15
  Loop closure connections:
    Pose 0 <-> Pose 40
    Pose 2 <-> Pose 42
    Pose 4 <-> Pose 44
    Pose 6 <-> Pose 46
    Pose 8 <-> Pose 48
    ... and 10 more loop closures

  Running g2o optimizer...

  Optimization complete!

======================================================================
3D TRAJECTORY METRICS COMPARISON
======================================================================

--- Position Errors (meters) ---
Metric                         Noisy       Optimized    Improvement
----------------------------------------------------------------------
RMSE                        0.456789        0.012345       97.30%
Mean Error                  0.389012        0.009876       97.46%
Max Error                   1.234567        0.045678       96.30%

--- Orientation Errors (radians) ---
Metric                         Noisy       Optimized    Improvement
----------------------------------------------------------------------
RMSE                        0.123456        0.003456       97.20%
Mean Error                  0.098765        0.002345       97.63%
Max Error                   0.345678        0.012345       96.43%

--- Orientation Errors (degrees) ---
Metric                         Noisy       Optimized    Improvement
----------------------------------------------------------------------
RMSE (degrees)               7.0732         0.1980       97.20%
Mean Error (degrees)         5.6578         0.1344       97.63%
Max Error (degrees)         19.8070         0.7072       96.43%
======================================================================


FICHIERS GÉNÉRÉS:
-----------------
- noise_3d.g2o : Graphe de poses d'entrée (avec bruit et loop closures)
  Format : VERTEX_SE3:QUAT et EDGE_SE3:QUAT
  Taille : ~100-500 KB selon nombre de poses

- opt_3d.g2o : Graphe de poses optimisé
  Format : VERTEX_SE3:QUAT uniquement (positions corrigées)
  Taille : ~20-100 KB selon nombre de poses


EXEMPLE DE CONTENU noise_3d.g2o:
---------------------------------
VERTEX_SE3:QUAT 0 -5.0 -8.0 0.0 0.0 0.04998 0.0 0.99875
VERTEX_SE3:QUAT 1 -4.5234 -7.9876 0.0987 0.0012 0.04987 0.0023 0.99874
VERTEX_SE3:QUAT 2 -4.0456 -8.0123 0.1965 0.0024 0.04976 0.0045 0.99872
...
EDGE_SE3:QUAT 0 1 0.4523 0.0123 0.0987 0.0012 -0.0011 0.0023 0.99999 500 0 0 0 0 0 500 0 0 0 0 500 0 0 0 500 0 0 500 0 500
EDGE_SE3:QUAT 1 2 0.4789 -0.0247 0.0978 0.0012 -0.0011 0.0022 0.99999 500 0 0 0 0 0 500 0 0 0 0 500 0 0 0 500 0 0 500 0 500
...
EDGE_SE3:QUAT 0 40 0.0234 0.1234 -0.0567 0.0234 -0.0123 0.0345 0.99912 700 0 0 0 0 0 700 0 0 0 0 700 0 0 0 700 0 0 700 0 700
...
FIX 0


EXEMPLE DE CONTENU opt_3d.g2o:
-------------------------------
VERTEX_SE3:QUAT 0 -5.0 -8.0 0.0 0.0 0.04998 0.0 0.99875
VERTEX_SE3:QUAT 1 -4.5512 -7.9998 0.0998 0.0002 0.04997 0.0003 0.99874
VERTEX_SE3:QUAT 2 -4.1024 -8.0002 0.1996 0.0004 0.04996 0.0006 0.99872
...
(Positions optimisées après correction par g2o)


AVEC VISUALISATION (sans --no-viz):
------------------------------------
Le programme affichera 5 fenêtres matplotlib :

1. Ground Truth Trajectory (3D)
   - Trajectoire de référence en 3D
   - Flèches d'orientation rouges
   - Vue rotative interactive

2. Noisy Trajectory with Loop Closures (3D)
   - Trajectoire avec bruit en vert
   - Loop closures en cyan pointillé
   - Montre la dérive de l'odométrie

3. Ground Truth vs Optimized Trajectory (3D)
   - Rouge : ground truth
   - Bleu : après optimisation
   - Loop closures en cyan
   - Comparaison directe

4. Ground Truth vs Optimized vs Noisy (3D)
   - Rouge : ground truth
   - Bleu : optimized
   - Vert : noisy
   - Vue complète de l'amélioration

5. 3D Position/Orientation Errors
   - Deux graphiques (position et orientation)
   - Vert : erreurs avant optimisation
   - Bleu : erreurs après optimisation
   - Lignes RMSE en pointillé


TEMPS D'EXÉCUTION TYPIQUE:
---------------------------
Sur un ordinateur moderne (Intel i7, 16GB RAM):

Sans visualisation (--no-viz):
- Génération trajectoire : < 0.1s
- Ajout de bruit : < 0.1s
- Écriture G2O : < 0.1s
- Optimisation G2O : 1-3s
- Calcul des métriques : < 0.1s
TOTAL : ~2-4 secondes

Avec visualisation:
- Même chose + 5 fenêtres matplotlib
- Dépend du temps de fermeture des fenêtres
TOTAL : ~2-4 secondes + temps utilisateur


COMPARAISON AVEC VERSION 2D:
-----------------------------

Version 2D (main.py --seed 42 --no-viz):
- Temps d'optimisation : ~0.5-1s
- Amélioration position : ~97%
- Amélioration orientation : ~97%

Version 3D (main_3d.py --seed 42 --no-viz):
- Temps d'optimisation : ~1-3s (2-3x plus lent)
- Amélioration position : ~97% (similaire)
- Amélioration orientation : ~97% (similaire)

La version 3D est plus lente mais offre une modélisation complète
de la trajectoire avec altitude et orientation 6DOF.


UTILISATION AVANCÉE:
--------------------

# Test de robustesse avec bruit élevé
$ python main_3d.py --noise-sigma 0.15 --seed 42

# Trajectoire hélicoïdale complexe
$ python main_3d.py --trajectory-type helix --num-poses 30 --seed 42

# Sans loop closures (drift pur)
$ python main_3d.py --loop-sampling 0 --seed 42

# Loop closures depuis poses bruitées + bruit d'observation
$ python main_3d.py --loop-from-noisy --loop-noise-sigma 0.05 --seed 42

# Configuration personnalisée complète
$ python main_3d.py --trajectory-type helix --num-poses 25 \
    --loop-sampling 1 --noise-sigma 0.08 --loop-noise-sigma 0.03 \
    --odom-info 400 --loop-info 800 --seed 123


MESSAGES D'ERREUR POSSIBLES:
-----------------------------

1. "g2o: command not found"
   → G2O n'est pas installé ou pas dans le PATH
   → Solution : Installer g2o et vérifier avec `which g2o`

2. "ModuleNotFoundError: No module named 'scipy'"
   → scipy n'est pas installé
   → Solution : pip install scipy

3. "ImportError: cannot import name 'Rotation' from 'scipy.spatial.transform'"
   → Version de scipy trop ancienne
   → Solution : pip install --upgrade scipy

4. "ValueError: Input must be a 4-element unit quaternion"
   → Quaternion mal normalisé (ne devrait pas arriver)
   → Vérifier les fonctions de génération de trajectoire

5. Visualisation 3D ne s'affiche pas
   → Problème avec le backend matplotlib
   → Solution : Vérifier l'installation de matplotlib avec support 3D
   → Ou utiliser --no-viz pour désactiver


NOTES:
------
- Les résultats exacts dépendent de l'architecture du système et de la version de g2o
- Utiliser --seed pour des résultats reproductibles
- Les pourcentages d'amélioration sont généralement > 95% avec loop closures
- Sans loop closures, l'amélioration sera proche de 0% (pas de correction)
